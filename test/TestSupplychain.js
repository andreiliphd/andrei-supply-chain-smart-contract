// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const truffleAssert = require('truffle-assertions');

let SupplyChain = artifacts.require('../Ownable');

let accounts;

contract('SupplyChain', function(accs) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    accounts = accs;
});

///Available Accounts
///==================
///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

// 1st Test
it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
    const instance = await SupplyChain.deployed();
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let result = await instance.addFarmer(originFarmerID, {from: ownerID});
    let eventEmitted = false;
    let harvestItem = await instance.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from: ownerID});
    truffleAssert.eventEmitted(harvestItem, 'Harvested', (ev) => {
        if (upc==Number(ev["upc"])) eventEmitted = true;
        return true;
    });
    let isFarmer = await instance.isFarmer(originFarmerID, {from: ownerID});
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
    assert.equal(eventEmitted, true, 'Invalid event emitted')
    assert.equal(isFarmer, true);
    assert.equal(eventEmitted, true);
})

// 2nd Test
it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
    const instance = await SupplyChain.deployed()
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let harvestEmitted = false;
    let processEmitted = false;
    let isFarmer = await instance.isFarmer(originFarmerID, {from: ownerID});
    let harvestItem = await instance.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from: ownerID});
    truffleAssert.eventEmitted(harvestItem, 'Harvested', (ev) => {
        if (upc==Number(ev["upc"])) harvestEmitted = true;
        return true;
    });
    let processItem = await instance.processItem(upc, {from: originFarmerID});
    truffleAssert.eventEmitted(processItem, 'Processed', (ev) => {
        if (upc==Number(ev["upc"])) processEmitted = true;
        return true;
    });
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(isFarmer, true);
    assert.equal(processEmitted, true, 'Invalid event emitted')
    assert.equal(harvestEmitted, true);
    assert.equal(resultBufferOne[0], sku+1, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
})

// 3rd Test
it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
    const supplyChain = await SupplyChain.deployed()

    const instance = await SupplyChain.deployed()
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let packEmitted = false;
    let isFarmer = await instance.isFarmer(originFarmerID, {from: ownerID});
    let packItem = await instance.packItem(upc, {from: originFarmerID});
    truffleAssert.eventEmitted(packItem, 'Packed', (ev) => {
        if (upc==Number(ev["upc"])) packEmitted = true;
        return true;
    });
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(isFarmer, true);
    assert.equal(packEmitted, true, 'Invalid event emitted')
    assert.equal(resultBufferOne[0], sku+1, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')

})

// 4th Test
it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
    const instance = await SupplyChain.deployed()
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let forSaleEmitted = false;
    let isFarmer = await instance.isFarmer(originFarmerID, {from: ownerID});
    let sellItem = await instance.sellItem(upc, productPrice, {from: originFarmerID});
    truffleAssert.eventEmitted(sellItem, 'ForSale', (ev) => {
        if (upc==Number(ev["upc"])) forSaleEmitted = true;
        return true;
    });
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(isFarmer, true);
    assert.equal(forSaleEmitted, true, 'Invalid event emitted')
    assert.equal(resultBufferOne[0], sku+1, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')

})

// 5th Test
it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
    const instance = await SupplyChain.deployed()
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let soldEmitted = false;
    let result = await instance.addDistributor(distributorID, {from: ownerID});
    let buyItem = await instance.buyItem(upc, {from: distributorID, value: productPrice});

    truffleAssert.eventEmitted(buyItem, 'Sold', (ev) => {
        if (upc==Number(ev["upc"])) soldEmitted = true;
        return true;
    });
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(soldEmitted, true, 'Invalid event emitted')
    assert.equal(resultBufferOne[0], sku+1, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
})

// 6th Test
it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
    const instance = await SupplyChain.deployed()
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let shipItemEmitted = false;
    let shipItem = await instance.shipItem(upc, {from: distributorID});
    truffleAssert.eventEmitted(shipItem, 'Shipped', (ev) => {
        if (upc==Number(ev["upc"])) shipItemEmitted = true;
        return true;
    });
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(shipItemEmitted, true, 'Invalid event emitted')
    assert.equal(resultBufferOne[0], sku+1, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
})

// 7th Test
it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
    const instance = await SupplyChain.deployed()
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let receiveItemEmitted = false;
    let result = await instance.addRetailer(retailerID, {from: ownerID});
    let receiveItem = await instance.receiveItem(upc, {from: retailerID});
    truffleAssert.eventEmitted(receiveItem, 'Received', (ev) => {
        if (upc==Number(ev["upc"])) receiveItemEmitted = true;
        return true;
    });
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(receiveItemEmitted, true, 'Invalid event emitted')
    assert.equal(resultBufferOne[0], sku+1, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
})

// 8th Test
it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
    const instance = await SupplyChain.deployed()
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let purchaseItemEmitted = false;
    let result = await instance.addConsumer(consumerID, {from: ownerID});
    let purchaseItem = await instance.purchaseItem(upc, {from: consumerID});

    truffleAssert.eventEmitted(purchaseItem, 'Purchased', (ev) => {
        if (upc==Number(ev["upc"])) purchaseItemEmitted = true;
        return true;
    });
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(purchaseItemEmitted, true, 'Invalid event emitted')
    assert.equal(resultBufferOne[0], sku+1, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
})

// 9th Test
it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
    const instance = await SupplyChain.deployed()
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku+1, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
})

// 10th Test
it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
    const instance = await SupplyChain.deployed()
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);
    assert.equal(resultBufferTwo[0], sku+1, 'Error: Invalid item SKU')
    assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[2], productID+1, 'Error: Invalid item productID')
    assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
    assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID')
    assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID')
    assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid item consumerID')

})